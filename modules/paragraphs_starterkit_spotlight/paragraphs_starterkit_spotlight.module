<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_node_presave().
 */
function paragraphs_starterkit_spotlight_node_presave(NodeInterface $node) {

	// Clear cache for prev/next navigation on lexicon nodes.
	if ($node->bundle() == 'lexicon') {
		$tags = ['node:bundle:' . $node->getType()];
		Cache::invalidateTags($tags);
	}
}

/**
 * Implements hook_node_delete().
 */
function paragraphs_starterkit_spotlight_node_delete(NodeInterface $node) {

	// Clear cache for prev/next navigation on lexicon nodes.
	if ($node->bundle() == 'lexicon') {
		$tags = ['node:bundle:' . $node->getType()];
		Cache::invalidateTags($tags);
	}
}

/**
 * Implements hook_preprocess_node().
 */
function paragraphs_starterkit_spotlight_preprocess_node(&$variables) {

	/* @var $node NodeInterface */
  $node = $variables['elements']['#node'];
  if ($node->hasField('field_paragraphs')) {
    if (!$node->field_paragraphs->isEmpty() && $bundle = $node->field_paragraphs[0]->entity->bundle()) {
      if ($bundle == 'spotlight') {
        $variables['has_spotlight_title'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function paragraphs_starterkit_spotlight_preprocess_taxonomy_term(&$variables) {

	/* @var $term TermInterface */
  $term = $variables['elements']['#taxonomy_term'];
  if ($term->hasField('field_paragraphs')) {
    if (!$term->field_paragraphs->isEmpty() && $bundle = $term->field_paragraphs[0]->entity->bundle()) {
      if ($bundle == 'spotlight') {
        $variables['has_spotlight_title'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraphs().
 */
function paragraphs_starterkit_spotlight_preprocess_paragraph(&$variables) {

	/* @var $paragraph \Drupal\paragraphs\ParagraphInterface */
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->bundle() == 'spotlight') {
    $variables['has_headline'] = (bool) $paragraph->field_has_headline->value;
    $variables['has_socials'] = (bool) $paragraph->field_has_socials->value;
    $variables['text_position'] = $paragraph->field_text_position->value;

    if ($variables['has_socials']) {
      if ($node = \Drupal::routeMatch()->getParameter('node')) {
        _infinite_paragraphs_get_parent_base_data($node, $variables);
      }
      else if ($term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
        _infinite_paragraphs_get_parent_base_data($term, $variables);
      }
    }

    if ($paragraph->getParentEntity()->bundle() == 'lexicon') {
			$variables['lexicon_links'] = paragraphs_starterkit_spotlight_get_lexicon_links($paragraph);

			// Clear caches when new lexicon nodes are created.
			$variables['#cache']['tags']['node:bundle:lexicon'];
		}
		else {
			$variables['anchor_links'] = paragraphs_starterkit_spotlight_get_anchor_links($paragraph);
		}
  }
}

/**
 * Get anchor links from all paragraphs of parent entity.
 *
 * @param \Drupal\paragraphs\ParagraphInterface $paragraph
 *
 * @return array
 */
function paragraphs_starterkit_spotlight_get_anchor_links(ParagraphInterface $paragraph) {
	$anchor_links = [
		'#theme' => 'links',
		'#links' => [],
	];

	$paragraphs = [];
	if (isset($paragraph->getParentEntity()->field_paragraphs)) {
		$paragraphs = $paragraph->getParentEntity()->field_paragraphs;
	}

	foreach ($paragraphs as $sibling) {
		if ($sibling->entity->id() == $paragraph->id()) {
			continue;
		}
		if ($sibling->entity->field_anchor && !$sibling->entity->field_anchor->isEmpty()) {
			$anchor_links['#links'][] = [
				'title' => $sibling->entity->field_anchor->value,
				'url' => Url::fromUserInput('#' . Html::getId($sibling->entity->field_anchor->value)),
			];
		}
	}
	return $anchor_links;
}

/**
 * Get lexicon navigation links for lexicon nodes.
 *
 * @param \Drupal\paragraphs\ParagraphInterface $paragraph
 *
 * @return array
 */
function paragraphs_starterkit_spotlight_get_lexicon_links(ParagraphInterface $paragraph) {
	$lexicon_links = [
		'#theme' => 'links',
		'#links' => [],
	];

	// Get referenced lexicon type from lexicon node.
	$lexiconType = array_shift($paragraph->getParentEntity()->field_lexicon_type->referencedEntities());

	// Get NID of previous lexicon node.
	$prevNode = \Drupal::entityQuery('node')
		->condition('type', 'lexicon')
		->condition('status', TRUE)
		->condition('title', $paragraph->getParentEntity()->label(), '<')
		->condition('field_lexicon_type.entity.tid', $lexiconType->id())
		->sort('title', 'DESC')
		->range(0, 1)
		->execute();

	if (!empty($prevNode)) {
		$lexicon_links['#links'][] = [
			'title' => t('Previous'),
			'url' => Url::fromRoute('entity.node.canonical', array('node' => array_shift($prevNode))),
			'rel' => 'prev',
		];
	}

	// Get link to lexicon.
	$lexicon_links['#links'][] = [
		'title' => $lexiconType->label(),
		'url' => Url::fromRoute('entity.taxonomy_term.canonical', array('taxonomy_term' => $lexiconType->id())),
	];

	// Get NID of next lexicon node.
	$nextNode = \Drupal::entityQuery('node')
		->condition('type', 'lexicon')
		->condition('status', TRUE)
		->condition('title', $paragraph->getParentEntity()->label(), '>')
		->condition('field_lexicon_type.entity.tid', $lexiconType->id())
		->sort('title', 'ASC')
		->range(0, 1)
		->execute();

	if (!empty($nextNode)) {
		$lexicon_links['#links'][] = [
			'title' => t('Next'),
			'url' => Url::fromRoute('entity.node.canonical', array('node' => array_shift($nextNode))),
			'rel' => 'next',
		];
	}

	return $lexicon_links;
}
